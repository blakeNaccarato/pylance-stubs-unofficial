from typing import Iterator, List, Mapping, Optional, Pattern, Tuple, Type, TypeVar, Union

ESCAPE_MAPPINGS: Mapping[str, Union[str, None]]

class Choice(list): ...
class Group(list): ...
class NonCapture(list): ...

def normalize(pattern: str) -> List[Tuple[str, List[str]]]: ...
def next_char(input_iter: Iterator[str]) -> Iterator[Tuple[str, bool]]: ...
def walk_to_end(ch: str, input_iter: Iterator[Tuple[str, bool]]) -> None: ...
def get_quantifier(ch: str, input_iter: Iterator[Tuple[str, bool]]) -> Tuple[int, Optional[str]]: ...
def contains(source: Union[Group, NonCapture, str], inst: Type[Group]) -> bool: ...
def flatten_result(
    source: Optional[Union[List[Union[Choice, Group, str]], Group, NonCapture]]
) -> Tuple[List[str], List[List[str]]]: ...

# Returns SimpleLazyObject, but we can safely ignore it
_P = TypeVar("_P", str, bytes)

def _lazy_re_compile(regex: Union[_P, Pattern[_P]], flags: int = ...) -> Pattern[_P]: ...
